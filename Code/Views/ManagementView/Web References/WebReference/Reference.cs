//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace ManagementView.WebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Service1Soap", Namespace="http://tempuri.org/")]
    public partial class Service1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GHDInsertDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddMachineResult_5678OperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadHighPressureMachineResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback Add_Box_InfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service1() {
            this.Url = global::ManagementView.Properties.Settings.Default.ManagementView_WebReference_Service1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GHDInsertDataCompletedEventHandler GHDInsertDataCompleted;
        
        /// <remarks/>
        public event AddMachineResult_5678CompletedEventHandler AddMachineResult_5678Completed;
        
        /// <remarks/>
        public event UploadHighPressureMachineResultCompletedEventHandler UploadHighPressureMachineResultCompleted;
        
        /// <remarks/>
        public event Add_Box_InfoCompletedEventHandler Add_Box_InfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GHDInsertData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GHDInsertData(string Sn, string BoxEanCode, string Weight, string Field2, string Field3, string Field4, string Field5, string Field6, string Field7, string Field8, string Type) {
            object[] results = this.Invoke("GHDInsertData", new object[] {
                        Sn,
                        BoxEanCode,
                        Weight,
                        Field2,
                        Field3,
                        Field4,
                        Field5,
                        Field6,
                        Field7,
                        Field8,
                        Type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GHDInsertDataAsync(string Sn, string BoxEanCode, string Weight, string Field2, string Field3, string Field4, string Field5, string Field6, string Field7, string Field8, string Type) {
            this.GHDInsertDataAsync(Sn, BoxEanCode, Weight, Field2, Field3, Field4, Field5, Field6, Field7, Field8, Type, null);
        }
        
        /// <remarks/>
        public void GHDInsertDataAsync(string Sn, string BoxEanCode, string Weight, string Field2, string Field3, string Field4, string Field5, string Field6, string Field7, string Field8, string Type, object userState) {
            if ((this.GHDInsertDataOperationCompleted == null)) {
                this.GHDInsertDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGHDInsertDataOperationCompleted);
            }
            this.InvokeAsync("GHDInsertData", new object[] {
                        Sn,
                        BoxEanCode,
                        Weight,
                        Field2,
                        Field3,
                        Field4,
                        Field5,
                        Field6,
                        Field7,
                        Field8,
                        Type}, this.GHDInsertDataOperationCompleted, userState);
        }
        
        private void OnGHDInsertDataOperationCompleted(object arg) {
            if ((this.GHDInsertDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GHDInsertDataCompleted(this, new GHDInsertDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddMachineResult_5678", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddMachineResult_5678(
                    string Time, 
                    string Line, 
                    string StationNo, 
                    string Barcode, 
                    string Result, 
                    string Hi_P_mA, 
                    string Volt_V, 
                    string Freq_Hz, 
                    string STBYPower_W, 
                    string Power_W_Cold_OFF_Heat_OFF_Speed_LOW, 
                    string Speed_ms_Cold_OFF_Speed_LOW_Heat_OFF, 
                    string Power_W_Cold_OFF_Speed_LOW_Heat_LOW, 
                    string Power_W_Cold_OFF_Speed_LOW_Heat_HI, 
                    string Temp_Cold_OFF_Speed_HI_Heat_HI, 
                    string Power_W_Cold_OFF_Speed_HI_Heat_HI, 
                    string Power_W_Cold_OFF_Speed_HI_Heat_OFF, 
                    string Speed_ms_Cold_OFF_Speed_HI_Heat_OFF, 
                    string Power_W_Cold_ON_Speed_HI_Heat_HI, 
                    string Power_W_Cold_ON_Speed_LOW_Heat_LOW, 
                    string Power_W_Cold_OFF_Speed_HI_Heat_LOW, 
                    string ION_10x6_Cold_OFF_Speed_HI_Heat_LOW) {
            object[] results = this.Invoke("AddMachineResult_5678", new object[] {
                        Time,
                        Line,
                        StationNo,
                        Barcode,
                        Result,
                        Hi_P_mA,
                        Volt_V,
                        Freq_Hz,
                        STBYPower_W,
                        Power_W_Cold_OFF_Heat_OFF_Speed_LOW,
                        Speed_ms_Cold_OFF_Speed_LOW_Heat_OFF,
                        Power_W_Cold_OFF_Speed_LOW_Heat_LOW,
                        Power_W_Cold_OFF_Speed_LOW_Heat_HI,
                        Temp_Cold_OFF_Speed_HI_Heat_HI,
                        Power_W_Cold_OFF_Speed_HI_Heat_HI,
                        Power_W_Cold_OFF_Speed_HI_Heat_OFF,
                        Speed_ms_Cold_OFF_Speed_HI_Heat_OFF,
                        Power_W_Cold_ON_Speed_HI_Heat_HI,
                        Power_W_Cold_ON_Speed_LOW_Heat_LOW,
                        Power_W_Cold_OFF_Speed_HI_Heat_LOW,
                        ION_10x6_Cold_OFF_Speed_HI_Heat_LOW});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddMachineResult_5678Async(
                    string Time, 
                    string Line, 
                    string StationNo, 
                    string Barcode, 
                    string Result, 
                    string Hi_P_mA, 
                    string Volt_V, 
                    string Freq_Hz, 
                    string STBYPower_W, 
                    string Power_W_Cold_OFF_Heat_OFF_Speed_LOW, 
                    string Speed_ms_Cold_OFF_Speed_LOW_Heat_OFF, 
                    string Power_W_Cold_OFF_Speed_LOW_Heat_LOW, 
                    string Power_W_Cold_OFF_Speed_LOW_Heat_HI, 
                    string Temp_Cold_OFF_Speed_HI_Heat_HI, 
                    string Power_W_Cold_OFF_Speed_HI_Heat_HI, 
                    string Power_W_Cold_OFF_Speed_HI_Heat_OFF, 
                    string Speed_ms_Cold_OFF_Speed_HI_Heat_OFF, 
                    string Power_W_Cold_ON_Speed_HI_Heat_HI, 
                    string Power_W_Cold_ON_Speed_LOW_Heat_LOW, 
                    string Power_W_Cold_OFF_Speed_HI_Heat_LOW, 
                    string ION_10x6_Cold_OFF_Speed_HI_Heat_LOW) {
            this.AddMachineResult_5678Async(Time, Line, StationNo, Barcode, Result, Hi_P_mA, Volt_V, Freq_Hz, STBYPower_W, Power_W_Cold_OFF_Heat_OFF_Speed_LOW, Speed_ms_Cold_OFF_Speed_LOW_Heat_OFF, Power_W_Cold_OFF_Speed_LOW_Heat_LOW, Power_W_Cold_OFF_Speed_LOW_Heat_HI, Temp_Cold_OFF_Speed_HI_Heat_HI, Power_W_Cold_OFF_Speed_HI_Heat_HI, Power_W_Cold_OFF_Speed_HI_Heat_OFF, Speed_ms_Cold_OFF_Speed_HI_Heat_OFF, Power_W_Cold_ON_Speed_HI_Heat_HI, Power_W_Cold_ON_Speed_LOW_Heat_LOW, Power_W_Cold_OFF_Speed_HI_Heat_LOW, ION_10x6_Cold_OFF_Speed_HI_Heat_LOW, null);
        }
        
        /// <remarks/>
        public void AddMachineResult_5678Async(
                    string Time, 
                    string Line, 
                    string StationNo, 
                    string Barcode, 
                    string Result, 
                    string Hi_P_mA, 
                    string Volt_V, 
                    string Freq_Hz, 
                    string STBYPower_W, 
                    string Power_W_Cold_OFF_Heat_OFF_Speed_LOW, 
                    string Speed_ms_Cold_OFF_Speed_LOW_Heat_OFF, 
                    string Power_W_Cold_OFF_Speed_LOW_Heat_LOW, 
                    string Power_W_Cold_OFF_Speed_LOW_Heat_HI, 
                    string Temp_Cold_OFF_Speed_HI_Heat_HI, 
                    string Power_W_Cold_OFF_Speed_HI_Heat_HI, 
                    string Power_W_Cold_OFF_Speed_HI_Heat_OFF, 
                    string Speed_ms_Cold_OFF_Speed_HI_Heat_OFF, 
                    string Power_W_Cold_ON_Speed_HI_Heat_HI, 
                    string Power_W_Cold_ON_Speed_LOW_Heat_LOW, 
                    string Power_W_Cold_OFF_Speed_HI_Heat_LOW, 
                    string ION_10x6_Cold_OFF_Speed_HI_Heat_LOW, 
                    object userState) {
            if ((this.AddMachineResult_5678OperationCompleted == null)) {
                this.AddMachineResult_5678OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMachineResult_5678OperationCompleted);
            }
            this.InvokeAsync("AddMachineResult_5678", new object[] {
                        Time,
                        Line,
                        StationNo,
                        Barcode,
                        Result,
                        Hi_P_mA,
                        Volt_V,
                        Freq_Hz,
                        STBYPower_W,
                        Power_W_Cold_OFF_Heat_OFF_Speed_LOW,
                        Speed_ms_Cold_OFF_Speed_LOW_Heat_OFF,
                        Power_W_Cold_OFF_Speed_LOW_Heat_LOW,
                        Power_W_Cold_OFF_Speed_LOW_Heat_HI,
                        Temp_Cold_OFF_Speed_HI_Heat_HI,
                        Power_W_Cold_OFF_Speed_HI_Heat_HI,
                        Power_W_Cold_OFF_Speed_HI_Heat_OFF,
                        Speed_ms_Cold_OFF_Speed_HI_Heat_OFF,
                        Power_W_Cold_ON_Speed_HI_Heat_HI,
                        Power_W_Cold_ON_Speed_LOW_Heat_LOW,
                        Power_W_Cold_OFF_Speed_HI_Heat_LOW,
                        ION_10x6_Cold_OFF_Speed_HI_Heat_LOW}, this.AddMachineResult_5678OperationCompleted, userState);
        }
        
        private void OnAddMachineResult_5678OperationCompleted(object arg) {
            if ((this.AddMachineResult_5678Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMachineResult_5678Completed(this, new AddMachineResult_5678CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadHighPressureMachineResult", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadHighPressureMachineResult(string Barcode, string Result) {
            this.Invoke("UploadHighPressureMachineResult", new object[] {
                        Barcode,
                        Result});
        }
        
        /// <remarks/>
        public void UploadHighPressureMachineResultAsync(string Barcode, string Result) {
            this.UploadHighPressureMachineResultAsync(Barcode, Result, null);
        }
        
        /// <remarks/>
        public void UploadHighPressureMachineResultAsync(string Barcode, string Result, object userState) {
            if ((this.UploadHighPressureMachineResultOperationCompleted == null)) {
                this.UploadHighPressureMachineResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadHighPressureMachineResultOperationCompleted);
            }
            this.InvokeAsync("UploadHighPressureMachineResult", new object[] {
                        Barcode,
                        Result}, this.UploadHighPressureMachineResultOperationCompleted, userState);
        }
        
        private void OnUploadHighPressureMachineResultOperationCompleted(object arg) {
            if ((this.UploadHighPressureMachineResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadHighPressureMachineResultCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Add_Box_Info", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Add_Box_Info(string pn, string boxNo, string sn, bool isbulk, string SO, out System.Data.DataTable dtResult) {
            object[] results = this.Invoke("Add_Box_Info", new object[] {
                        pn,
                        boxNo,
                        sn,
                        isbulk,
                        SO});
            dtResult = ((System.Data.DataTable)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Add_Box_InfoAsync(string pn, string boxNo, string sn, bool isbulk, string SO) {
            this.Add_Box_InfoAsync(pn, boxNo, sn, isbulk, SO, null);
        }
        
        /// <remarks/>
        public void Add_Box_InfoAsync(string pn, string boxNo, string sn, bool isbulk, string SO, object userState) {
            if ((this.Add_Box_InfoOperationCompleted == null)) {
                this.Add_Box_InfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdd_Box_InfoOperationCompleted);
            }
            this.InvokeAsync("Add_Box_Info", new object[] {
                        pn,
                        boxNo,
                        sn,
                        isbulk,
                        SO}, this.Add_Box_InfoOperationCompleted, userState);
        }
        
        private void OnAdd_Box_InfoOperationCompleted(object arg) {
            if ((this.Add_Box_InfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Add_Box_InfoCompleted(this, new Add_Box_InfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GHDInsertDataCompletedEventHandler(object sender, GHDInsertDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GHDInsertDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GHDInsertDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AddMachineResult_5678CompletedEventHandler(object sender, AddMachineResult_5678CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddMachineResult_5678CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddMachineResult_5678CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UploadHighPressureMachineResultCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Add_Box_InfoCompletedEventHandler(object sender, Add_Box_InfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Add_Box_InfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Add_Box_InfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable dtResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591