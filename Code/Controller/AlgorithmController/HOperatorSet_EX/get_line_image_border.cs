//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 12.0
//


using System;
using HalconDotNet;
namespace HOperatorSet_EX
{

    public partial class HOperatorSet_Ex
    {
        public static void get_line_image_border(HTuple hv_WindowHandle, HTuple hv_Row1, HTuple hv_Column1,
            HTuple hv_Row2, HTuple hv_Column2, out HTuple hv_Rows, out HTuple hv_Columns)
        {
            // Local iconic variables 

            // Local control variables 

            HTuple hv_IntersectionPoints = null, hv_Row = null;
            HTuple hv_Column = null, hv_Width = null, hv_Height = null;
            HTuple hv_Segment1Column = null, hv_Segment2Column = null;
            HTuple hv_Segment1Row = null, hv_Segment2Row = null, hv_I = null;
            HTuple hv_RowTmp = new HTuple(), hv_ColumnTmp = new HTuple();
            HTuple hv_IsOverlapping = new HTuple();
            // Initialize local and output iconic variables 
            //Intersect a line with the window border
            //to get the representation of a line
            //
            hv_IntersectionPoints = new HTuple();
            HOperatorSet.GetWindowExtents(hv_WindowHandle, out hv_Row, out hv_Column,
                out hv_Width, out hv_Height);
            hv_Segment1Column = new HTuple();
            hv_Segment1Column[0] = 0;
            hv_Segment1Column[1] = 0;
            hv_Segment1Column[2] = 0;
            hv_Segment1Column = hv_Segment1Column.TupleConcat(hv_Width - 1);
            hv_Segment2Column = new HTuple();
            hv_Segment2Column = hv_Segment2Column.TupleConcat(hv_Width - 1);
            hv_Segment2Column = hv_Segment2Column.TupleConcat(hv_Width - 1);
            hv_Segment2Column = hv_Segment2Column.TupleConcat(0);
            hv_Segment2Column = hv_Segment2Column.TupleConcat(hv_Width - 1);
            hv_Segment1Row = new HTuple();
            hv_Segment1Row[0] = 0;
            hv_Segment1Row = hv_Segment1Row.TupleConcat(hv_Height - 1);
            hv_Segment1Row = hv_Segment1Row.TupleConcat(0);
            hv_Segment1Row = hv_Segment1Row.TupleConcat(0);
            hv_Segment2Row = new HTuple();
            hv_Segment2Row[0] = 0;
            hv_Segment2Row = hv_Segment2Row.TupleConcat(hv_Height - 1);
            hv_Segment2Row = hv_Segment2Row.TupleConcat(hv_Height - 1);
            hv_Segment2Row = hv_Segment2Row.TupleConcat(hv_Height - 1);
            //
            for (hv_I = 0; (int)hv_I <= (int)((new HTuple(hv_Segment1Column.TupleLength())) - 1); hv_I = (int)hv_I + 1)
            {
                HOperatorSet.IntersectionSegmentLine(hv_Segment1Row.TupleSelect(hv_I), hv_Segment1Column.TupleSelect(
                    hv_I), hv_Segment2Row.TupleSelect(hv_I), hv_Segment2Column.TupleSelect(
                    hv_I), hv_Row1, hv_Column1, hv_Row2, hv_Column2, out hv_RowTmp, out hv_ColumnTmp,
                    out hv_IsOverlapping);
                if ((int)(new HTuple(hv_RowTmp.TupleLength())) != 0)
                {
                    hv_IntersectionPoints = ((hv_IntersectionPoints.TupleConcat(hv_RowTmp))).TupleConcat(
                        hv_ColumnTmp);
                }
            }
            //
            hv_Rows = hv_IntersectionPoints[(new HTuple(0)).TupleConcat(2)];
            hv_Columns = hv_IntersectionPoints[(new HTuple(1)).TupleConcat(3)];

            return;
        }

    }
}