//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 12.0
//


using System;
using HalconDotNet;
namespace HOperatorSet_EX
{

    public partial class HOperatorSet_Ex
    {
        // Chapter: Classification / Misc
        // Short Description: Describe and calculate user-defined features to be used in conjunction with the calculate_feature_set procedure library. 
        public static void   get_custom_features(HObject ho_Region, HObject ho_Image, HTuple hv_CurrentName,
            HTuple hv_Mode, out HTuple hv_Output)
        {
            // Local iconic variables 

            HObject ho_RegionSelected = null, ho_Contours = null;
            HObject ho_ContoursSelected = null, ho_ContoursSplit = null;

            // Local control variables 

            HTuple hv_TmpResults = null, hv_Name = null;
            HTuple hv_Groups = null, hv_Feature = new HTuple(), hv_NumRegions = new HTuple();
            HTuple hv_I = new HTuple(), hv_NumContours = new HTuple();
            HTuple hv_NumLines = new HTuple(), hv_J = new HTuple();
            HTuple hv_NumSplit = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_RegionSelected);
            HOperatorSet.GenEmptyObj(out ho_Contours);
            HOperatorSet.GenEmptyObj(out ho_ContoursSelected);
            HOperatorSet.GenEmptyObj(out ho_ContoursSplit);
            //
            //This procedure can be used to extend the functionality
            //of the calculate_feature_set procedure library by
            //user-defined features.
            //
            //Instructions:
            //
            //1. Find the template block at the beginning the procedure
            //(marked by comments) and duplicate it.
            //
            //2. In the copy edit the two marked areas as follows:
            //
            //2.1. Feature name and groups:
            //Assign a unique identifier for your feature to the variable "Name".
            //Then, assign the groups that you want your feature to belong to
            //to the variable "Groups".
            //
            //2.2. Feature calculation:
            //Enter the code that calculates your feature and
            //assign the result to the variable "Feature".
            //
            //3. Test
            //Use the "test_feature" procedure to check,
            //if the feature is calculated correctly.
            //If the procedure throws an exception,
            //maybe the order of the feature vector is wrong
            //(See note below).
            //
            //4. Integration
            //- Save your modified procedure get_custom_features.hdvp
            //  to a location of your choice.
            //  (We recommend not to overwrite the template.)
            //- Make sure, that your version of get_custom_procedures
            //  is included in the procedure directories of HDevelop.
            //  (Choose Procedures -> Manage Procedures -> Directories -> Add from the HDevelop menu bar.)
            //
            //Note:
            //The current implementation supports region arrays as input.
            //In that case, multi-dimensional feature vectors are simply concatenated.
            //Example: The feature 'center' has two dimensions [Row,Column].
            //If an array of three regions is passed, the correct order of the "Feature" variable is
            //[Row1, Column1, Row2, Column2, Row3, Column3].
            //
            hv_TmpResults = new HTuple();
            //************************************************
            //************************************************
            //**** Copy the following template block     *****
            //**** and edit the two marked code sections *****
            //**** to add user-defined features          *****
            //************************************************
            //************************************************
            //
            //***************************************
            //*********** TEMPLATE BLOCK ************
            //***************************************
            //
            //********************************************************************
            //** Section 1:
            //** Enter unique feature name and groups to which it belongs here ***
            hv_Name = "custom_feature_numlines";
            hv_Groups = "custom";
            //** Enter unique feature name and groups above this line ************
            //********************************************************************
            if ((int)(new HTuple(hv_Name.TupleEqual(hv_CurrentName))) != 0)
            {
                //******************************************************
                //** Section 2:
                //** Enter code to calculate feature here **************
                hv_Feature = new HTuple();
                HOperatorSet.CountObj(ho_Region, out hv_NumRegions);
                HTuple end_val69 = hv_NumRegions;
                HTuple step_val69 = 1;
                for (hv_I = 1; hv_I.Continue(end_val69, step_val69); hv_I = hv_I.TupleAdd(step_val69))
                {
                    ho_RegionSelected.Dispose();
                    HOperatorSet.SelectObj(ho_Region, out ho_RegionSelected, hv_I);
                    ho_Contours.Dispose();
                    HOperatorSet.GenContourRegionXld(ho_RegionSelected, out ho_Contours, "border");
                    HOperatorSet.CountObj(ho_Contours, out hv_NumContours);
                    hv_NumLines = 0;
                    HTuple end_val74 = hv_NumContours;
                    HTuple step_val74 = 1;
                    for (hv_J = 1; hv_J.Continue(end_val74, step_val74); hv_J = hv_J.TupleAdd(step_val74))
                    {
                        ho_ContoursSelected.Dispose();
                        HOperatorSet.SelectObj(ho_Contours, out ho_ContoursSelected, hv_J);
                        ho_ContoursSplit.Dispose();
                        HOperatorSet.SegmentContoursXld(ho_ContoursSelected, out ho_ContoursSplit,
                            "lines", 5, 2, 1);
                        HOperatorSet.CountObj(ho_ContoursSplit, out hv_NumSplit);
                        hv_NumLines = hv_NumLines + hv_NumSplit;
                    }
                    hv_Feature = hv_Feature.TupleConcat(hv_NumLines);
                }
                //** Enter code to calculate feature above this line ***
                //******************************************************
                append_length_or_values(hv_Mode, hv_Feature, hv_TmpResults, out hv_TmpResults);
            }
            append_names_or_groups(hv_Mode, hv_Name, hv_Groups, hv_CurrentName, hv_TmpResults,
                out hv_TmpResults);
            //
            //************************************
            //****** END OF TEMPLATE BLOCK *******
            //************************************
            //
            hv_Output = hv_TmpResults.Clone();
            ho_RegionSelected.Dispose();
            ho_Contours.Dispose();
            ho_ContoursSelected.Dispose();
            ho_ContoursSplit.Dispose();

            return;
        }

    }
}