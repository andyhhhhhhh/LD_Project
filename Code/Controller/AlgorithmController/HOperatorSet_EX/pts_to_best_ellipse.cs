//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 12.0
//


using System;
using HalconDotNet;
namespace HOperatorSet_EX
{

    public partial class HOperatorSet_Ex
    {
        public static void pts_to_best_ellipse(out HObject ho_Ellipse, HTuple hv_Rows, HTuple hv_Cols,
            HTuple hv_ActiveNum, HTuple hv_ArcType, out HTuple hv_RowCenter, out HTuple hv_ColCenter,
            out HTuple hv_Phi, out HTuple hv_Radius1, out HTuple hv_Radius2, out HTuple hv_StartPhi,
            out HTuple hv_EndPhi, out HTuple hv_PointOrder)
        {
            // Local iconic variables 
            HObject ho_Contour = null;
            // Local control variables 
            HTuple hv_Length = null, hv_Length1 = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Ellipse);
            HOperatorSet.GenEmptyObj(out ho_Contour);
            hv_Phi = new HTuple();
            hv_Radius2 = new HTuple();
            hv_StartPhi = new HTuple();
            hv_EndPhi = new HTuple();
            hv_PointOrder = new HTuple();
            //初始化
            hv_RowCenter = 0;
            hv_ColCenter = 0;
            hv_Radius1 = 0;
            //产生一个空的直线对象，用于保存拟合后的圆
            ho_Ellipse.Dispose();
            HOperatorSet.GenEmptyObj(out ho_Ellipse);
            //计算边缘数量
            HOperatorSet.TupleLength(hv_Cols, out hv_Length);
            //当边缘数量不小于有效点数时进行拟合
            if ((int)((new HTuple(hv_Length.TupleGreaterEqual(hv_ActiveNum))).TupleAnd(new HTuple(hv_ActiveNum.TupleGreater(
                2)))) != 0)
            {
                //halcon的拟合是基于xld的，需要把边缘连接成xld
                ho_Contour.Dispose();
                HOperatorSet.GenContourPolygonXld(out ho_Contour, hv_Rows, hv_Cols);
                //拟合圆。使用的算法是''geotukey''，其他算法请参考fit_circle_contour_xld的描述部分。
                HOperatorSet.FitEllipseContourXld(ho_Contour, "geotukey", -1, 0, 0, 200, 3,
                    2, out hv_RowCenter, out hv_ColCenter, out hv_Phi, out hv_Radius1, out hv_Radius2,
                    out hv_StartPhi, out hv_EndPhi, out hv_PointOrder);
                //判断拟合结果是否有效：如果拟合成功，数组中元素的数量大于0
                HOperatorSet.TupleLength(hv_StartPhi, out hv_Length1);
                if ((int)(new HTuple(hv_Length1.TupleLess(1))) != 0)
                {
                    ho_Contour.Dispose();
                    return;
                }
                //根据拟合结果，产生直线xld
                if ((int)(new HTuple(hv_ArcType.TupleEqual("arc"))) != 0)
                {
                    ho_Ellipse.Dispose();
                    HOperatorSet.GenEllipseContourXld(out ho_Ellipse, hv_RowCenter, hv_ColCenter,
                        hv_Phi, hv_Radius1, hv_Radius2, hv_StartPhi, hv_EndPhi, hv_PointOrder,
                        1);
                 }
                else
                {
                    hv_StartPhi = 0;
                    hv_EndPhi = (new HTuple(360)).TupleRad();
                    ho_Ellipse.Dispose();
                    HOperatorSet.GenEllipseContourXld(out ho_Ellipse, hv_RowCenter, hv_ColCenter,
                        hv_Phi, hv_Radius1, hv_Radius2, hv_StartPhi, hv_EndPhi, hv_PointOrder,
                        1);
                }
            }

            ho_Contour.Dispose();

            return;
        }

    }
}
