//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 12.0
//


using System;
using HalconDotNet;
namespace HOperatorSet_EX
{
    public partial class HOperatorSet_Ex
    {
        public  static void disp_angle(HObject ho_Image, HTuple hv_Row1, HTuple hv_Column1, HTuple hv_Row2,
        HTuple hv_Column2, HTuple hv_Row11, HTuple hv_Column11, HTuple hv_Row21, HTuple hv_Column22, out HTuple hv_Row, out HTuple hv_Column,
        HTuple WinHandle)
        {
            // Local iconic variables 

            HObject ho_Cross, ho_Arrow1, ho_Arrow2, ho_CircleSector;

            // Local control variables 

            HTuple hv_IsOverlapping = null;
            HTuple hv_Angle1 = null, hv_Angle2 = null, hv_Width = null;
            HTuple hv_Height = null, hv_size = null, hv_size1 = null;
            HTuple hv_rad1 = new HTuple(), hv_rad2 = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Cross);
            HOperatorSet.GenEmptyObj(out ho_Arrow1);
            HOperatorSet.GenEmptyObj(out ho_Arrow2);
            HOperatorSet.GenEmptyObj(out ho_CircleSector);
            HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
            HOperatorSet.IntersectionLines(hv_Row1, hv_Column1, hv_Row2, hv_Column2, hv_Row11,
                hv_Column11, hv_Row21, hv_Column22, out hv_Row, out hv_Column, out hv_IsOverlapping);
            ho_Cross.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross, hv_Row, hv_Column, hv_Height / 50, new HTuple(45).TupleRad());
            //HOperatorSet.DispCross(WinHandle, hv_Row, hv_Column, 10, 0);
            HOperatorSet.AngleLx(hv_Row1, hv_Column1, hv_Row2, hv_Column2, out hv_Angle1);
            HOperatorSet.AngleLx(hv_Row11, hv_Column11, hv_Row21, hv_Column22, out hv_Angle2);
          
            hv_size = hv_Width / 50;
            hv_size1 = hv_Width / 20;
            ho_Arrow1.Dispose();
            HOperatorSet_Ex.gen_arrow_contour_xld(out ho_Arrow1, hv_Row1, hv_Column1, hv_Row2, hv_Column2,
                hv_size, hv_size);
            ho_Arrow2.Dispose();
            HOperatorSet_Ex.gen_arrow_contour_xld(out ho_Arrow2, hv_Row11, hv_Column11, hv_Row21, hv_Column22,
                hv_size, hv_size);
            if ((int)(new HTuple(hv_Angle1.TupleLess(0))) != 0)
            {
                hv_rad1 = ((new HTuple(360)).TupleRad()) + hv_Angle1;
            }
            else
            {
                hv_rad1 = hv_Angle1.Clone();
            }
            if ((int)(new HTuple(hv_Angle2.TupleLess(0))) != 0)
            {
                hv_rad2 = ((new HTuple(360)).TupleRad()) + hv_Angle2;
            }
            else
            {
                hv_rad2 = hv_Angle2.Clone();
            }
            ho_CircleSector.Dispose();
            //HOperatorSet.GenCircleSector(out ho_CircleSector, hv_Row, hv_Column, hv_size1,
            //             hv_rad1, hv_rad2);
            HOperatorSet.GenCircleContourXld(out ho_CircleSector, hv_Row, hv_Column, hv_size1, hv_rad1, hv_rad2, "positive", 1);
            HOperatorSet.SetDraw(WinHandle, "margin");
            HOperatorSet.SetColor(WinHandle, "blue");
            HOperatorSet.DispObj(ho_Cross, WinHandle);
            HOperatorSet.DispObj(ho_CircleSector, WinHandle);
            HOperatorSet.DispObj(ho_Arrow1, WinHandle);
            HOperatorSet.DispObj(ho_Arrow2, WinHandle);
            ho_Cross.Dispose();
            ho_Arrow1.Dispose();
            ho_Arrow2.Dispose();
            ho_CircleSector.Dispose();
            return;
        }

        public static void find_line(HObject ho_Image, out HObject ho_Arrow, out HObject ho_lineContour,
            out HObject ho_ruleContours, HTuple hv_Row1, HTuple hv_Column1, HTuple hv_Row2,
            HTuple hv_Column2, HTuple hv_MeasureCliperNum, HTuple hv_MeasureLength1, HTuple hv_MeasureLength2,
            HTuple hv_MeasureSigma, HTuple hv_MeasureThreshold, HTuple hv_MeasureTransition,
            HTuple hv_MeasureSelect, out HTuple hv_lineRow1, out HTuple hv_lineRow2, out HTuple hv_lineCol1,
            out HTuple hv_lineCol2, out HTuple hv_Rows, out HTuple hv_Columns)
        {

            // Local iconic variables 

            // Local control variables 

            HTuple hv_Angle = null, hv_beginRow = null;
            HTuple hv_beginCol = null, hv_endRow = null, hv_endCol = null;
            HTuple hv_Width = null, hv_Height = null, hv_MetrologyHandle = null;
            HTuple hv_Index = null, hv_LineParameter = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Arrow);
            HOperatorSet.GenEmptyObj(out ho_lineContour);
            HOperatorSet.GenEmptyObj(out ho_ruleContours);
            hv_lineRow1 = new HTuple();
            hv_lineRow2 = new HTuple();
            hv_lineCol1 = new HTuple();
            hv_lineCol2 = new HTuple();
            HOperatorSet.AngleLx(hv_Row1, hv_Column1, hv_Row2, hv_Column2, out hv_Angle);
            hv_beginRow = hv_Row1 - ((((hv_Angle - ((new HTuple(90)).TupleRad()))).TupleSin()
                ) * hv_MeasureLength1);
            hv_beginCol = hv_Column1 + ((((hv_Angle - ((new HTuple(90)).TupleRad()))).TupleCos()
                ) * hv_MeasureLength1);
            hv_endRow = hv_Row1 + ((((hv_Angle - ((new HTuple(90)).TupleRad()))).TupleSin()) * hv_MeasureLength1);
            hv_endCol = hv_Column1 - ((((hv_Angle - ((new HTuple(90)).TupleRad()))).TupleCos()
                ) * hv_MeasureLength1);
            //卡尺搜索方向
            ho_Arrow.Dispose();
            gen_arrow_contour_xld(out ho_Arrow, hv_beginRow, hv_beginCol, hv_endRow, hv_endCol,
                hv_MeasureLength2 * 2, hv_MeasureLength2 * 2);
            HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
            //创建2维测量
            HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
            HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, hv_Width, hv_Height);
            //加载线2维测量
            HOperatorSet.AddMetrologyObjectLineMeasure(hv_MetrologyHandle, hv_Row2, hv_Column2,
                hv_Row1, hv_Column1, hv_MeasureLength1, hv_MeasureLength2, hv_MeasureSigma,
                hv_MeasureThreshold, new HTuple(), new HTuple(), out hv_Index);
            //卡尺搜索模式 positive：白到黑   negative：黑到白
            HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, "all", "measure_transition",
                hv_MeasureTransition);
            //卡尺选择边缘点
            HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, "all", "measure_select",
                hv_MeasureSelect);
            //卡尺数量
            HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, "all", "num_measures",
                hv_MeasureCliperNum);
            //图像加载到2维测量中
            HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle);
            //拟合线结果
            HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "result_type",
                "all_param", out hv_LineParameter);
            if ((int)(new HTuple(hv_LineParameter.TupleGreater(4))) != 0)
            {
                hv_lineRow1 = hv_LineParameter[0];
                hv_lineCol1 = hv_LineParameter[1];
                hv_lineRow2 = hv_LineParameter[2];
                hv_lineCol2 = hv_LineParameter[3];
            }
            //gen_contour_polygon_xld (Contour1, [LineParameter[0],LineParameter[2]], [LineParameter[1],LineParameter[3]])
            //拟合线图形
            ho_lineContour.Dispose();
            HOperatorSet.GetMetrologyObjectResultContour(out ho_lineContour, hv_MetrologyHandle,
                "all", "all", 1.5);
            //卡尺图形
            ho_ruleContours.Dispose();
            HOperatorSet.GetMetrologyObjectMeasures(out ho_ruleContours, hv_MetrologyHandle,
                "all", "all", out hv_Rows, out hv_Columns);
            HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);

            return;
        }

        public static void find_circle(HObject ho_Image, out HObject ho_Arrow, out HObject ho_circleContour,
            out HObject ho_ruleContours, HTuple hv_Row, HTuple hv_Column, HTuple hv_Radius,
            HTuple hv_MeasureCliperNum, HTuple hv_MeasureLength1, HTuple hv_MeasureLength2,
            HTuple hv_MeasureSigma, HTuple hv_MeasureThreshold, HTuple hv_MeasureTransition,
            HTuple hv_MeasureSelect, out HTuple hv_circleRow1, out HTuple hv_circleCol1,
            out HTuple hv_circleRadius, out HTuple hv_Rows, out HTuple hv_Columns)
        {

            // Local iconic variables 
            // Local control variables 
            HTuple hv_RowEx = null, hv_ColEx = null, hv_Width = null;
            HTuple hv_Height = null, hv_MetrologyHandle = null, hv_Index = null;
            HTuple hv_CircleParameter = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Arrow);
            HOperatorSet.GenEmptyObj(out ho_circleContour);
            HOperatorSet.GenEmptyObj(out ho_ruleContours);
            hv_circleRow1 = new HTuple();
            hv_circleCol1 = new HTuple();
            hv_circleRadius = new HTuple();
            hv_RowEx = hv_Row - (((new HTuple(0)).TupleSin()) * (hv_Radius + hv_MeasureLength1));
            hv_ColEx = hv_Column + (((new HTuple(0)).TupleCos()) * (hv_Radius + hv_MeasureLength1));
            ho_Arrow.Dispose();
            gen_arrow_contour_xld(out ho_Arrow, hv_Row, hv_Column, hv_RowEx, hv_ColEx, hv_MeasureLength2 * 2,
                hv_MeasureLength2 * 2);
            HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
            //创建2维测量
            HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);

            //加载圆2维测量
            HOperatorSet.AddMetrologyObjectCircleMeasure(hv_MetrologyHandle, hv_Row, hv_Column,
                hv_Radius, hv_MeasureLength1, hv_MeasureLength2, hv_MeasureSigma, hv_MeasureThreshold,
                ((new HTuple("start_phi")).TupleConcat("end_phi")).TupleConcat("instances_outside_measure_regions"),
                (((new HTuple((new HTuple(0)).TupleRad())).TupleConcat((new HTuple(360)).TupleRad()
                ))).TupleConcat("false"), out hv_Index);
            //卡尺搜索模式 positive：黑到白  negative白到黑
            HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, "all", "measure_transition",
                hv_MeasureTransition);
            //卡尺选择边缘点
            HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, "all", "measure_select",
                hv_MeasureSelect);
            //卡尺数量
            HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, "all", "num_measures",
                hv_MeasureCliperNum);
            //图像加载到2维测量中
            HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle);
            //拟合圆结果
            HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "result_type",
                "all_param", out hv_CircleParameter);
            if ((int)(new HTuple(hv_CircleParameter.TupleGreater(3))) != 0)
            {
                hv_circleRow1 = hv_CircleParameter[0];
                hv_circleCol1 = hv_CircleParameter[1];
                hv_circleRadius = hv_CircleParameter[2];
            }
            //拟合圆图形
            ho_circleContour.Dispose();
            HOperatorSet.GetMetrologyObjectResultContour(out ho_circleContour, hv_MetrologyHandle,
                "all", "all", 1.5);
            //卡尺图形
            ho_ruleContours.Dispose();
            HOperatorSet.GetMetrologyObjectMeasures(out ho_ruleContours, hv_MetrologyHandle,
                "all", "all", out hv_Rows, out hv_Columns);
            HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);

            return;
        }

        public static void find_rectangle2(HObject ho_Image, out HObject ho_Arrow, out HObject ho_Rectangle2Contour,
            out HObject ho_ruleContours, HTuple hv_Row, HTuple hv_Column, HTuple hv_Phi,
            HTuple hv_Length1, HTuple hv_Length2, HTuple hv_MeasureCliperNum, HTuple hv_MeasureLength1,
            HTuple hv_MeasureLength2, HTuple hv_MeasureSigma, HTuple hv_MeasureThreshold,
            HTuple hv_MeasureTransition, HTuple hv_MeasureSelect, out HTuple hv_RectRow,
            out HTuple hv_RectCol, out HTuple hv_RectPhi, out HTuple hv_Len1, out HTuple hv_Len2,
            out HTuple hv_Rows, out HTuple hv_Columns)
        {

            // Local iconic variables 

            // Local control variables 

            HTuple hv_RowEx = null, hv_ColEx = null, hv_beginRow = null;
            HTuple hv_beginCol = null, hv_EndRow = null, hv_EndCol = null;
            HTuple hv_MetrologyHandle = null, hv_Width = null, hv_Height = null;
            HTuple hv_Index = null, hv_Rectangle2Parameter = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Arrow);
            HOperatorSet.GenEmptyObj(out ho_Rectangle2Contour);
            HOperatorSet.GenEmptyObj(out ho_ruleContours);
            hv_RectRow = new HTuple();
            hv_RectCol = new HTuple();
            hv_RectPhi = new HTuple();
            hv_Len1 = new HTuple();
            hv_Len2 = new HTuple();
            hv_RowEx = hv_Row - ((hv_Phi.TupleSin()) * hv_Length1);
            hv_ColEx = hv_Column + ((hv_Phi.TupleCos()) * hv_Length1);

            hv_beginRow = hv_RowEx + ((hv_Phi.TupleSin()) * hv_MeasureLength1);
            hv_beginCol = hv_ColEx - ((hv_Phi.TupleCos()) * hv_MeasureLength1);
            hv_EndRow = hv_RowEx - ((hv_Phi.TupleSin()) * hv_MeasureLength1);
            hv_EndCol = hv_ColEx + ((hv_Phi.TupleCos()) * hv_MeasureLength1);


            ho_Arrow.Dispose();
            gen_arrow_contour_xld(out ho_Arrow, hv_beginRow, hv_beginCol, hv_EndRow, hv_EndCol,
                hv_MeasureLength2 * 2, hv_MeasureLength2 * 2);
            //创建2维测量
            HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
            HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
            HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, hv_Width, hv_Height);
            //加载方向矩形2维测量
            HOperatorSet.AddMetrologyObjectRectangle2Measure(hv_MetrologyHandle, hv_Row,
                hv_Column, hv_Phi, hv_Length1, hv_Length2, hv_MeasureLength1, hv_MeasureLength2,
                hv_MeasureSigma, hv_MeasureThreshold, new HTuple(), new HTuple(), out hv_Index);
            //卡尺搜索模式 positive：白到黑   negative：黑到白
            HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, "all", "measure_transition",
                hv_MeasureTransition);
            //卡尺选择边缘点
            HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, "all", "measure_select",
                hv_MeasureSelect);
            //卡尺数量
            HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, "all", "num_measures",
                hv_MeasureCliperNum);
            //图像加载到2维测量中
            HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle);
            //拟合线结果
            HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "result_type",
                "all_param", out hv_Rectangle2Parameter);
            if ((int)(new HTuple(hv_Rectangle2Parameter.TupleGreater(5))) != 0)
            {
                hv_RectRow = hv_Rectangle2Parameter[0];
                hv_RectCol = hv_Rectangle2Parameter[1];
                hv_RectPhi = hv_Rectangle2Parameter[2];
                hv_Len1 = hv_Rectangle2Parameter[3];
                hv_Len2 = hv_Rectangle2Parameter[4];
            }
            //拟合方向矩形图形
            ho_Rectangle2Contour.Dispose();
            HOperatorSet.GetMetrologyObjectResultContour(out ho_Rectangle2Contour, hv_MetrologyHandle,
                "all", "all", 1.5);
            //卡尺方向矩形图形
            ho_ruleContours.Dispose();
            HOperatorSet.GetMetrologyObjectMeasures(out ho_ruleContours, hv_MetrologyHandle,
                "all", "all", out hv_Rows, out hv_Columns);
            HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
            return;
        }
    }

    }