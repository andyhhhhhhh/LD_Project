//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 12.0
//


using System;
using HalconDotNet;
namespace HOperatorSet_EX
{

    public partial class HOperatorSet_Ex
    {
        public static void select_max_length_contour(HObject ho_Contours, out HObject ho_MaxLengthContour)
        {
            // Local iconic variables 

            HObject ho_ObjectSelected = null;

            // Local control variables 

            HTuple hv_Number = new HTuple(), hv_Exception = null;
            HTuple hv_Max_Length = null, hv_Max_Index = null, hv_i = null;
            HTuple hv_Length = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_MaxLengthContour);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
            //打开错误信息
            // (dev_)set_check ("give_error")
            //最长轮廓变量初始化
            ho_MaxLengthContour.Dispose();
            HOperatorSet.GenEmptyObj(out ho_MaxLengthContour);
            //开启捕获异常
            try
            {
                //统计轮廓集合的数量
                HOperatorSet.CountObj(ho_Contours, out hv_Number);
                //捕获异常
            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException1)
            {
                HDevExpDefaultException1.ToHTuple(out hv_Exception);
                //异常处理
                ho_ObjectSelected.Dispose();

                return;
            }
            //如果轮廓数量无效，返回
            if ((int)(new HTuple(hv_Number.TupleLess(1))) != 0)
            {
                ho_ObjectSelected.Dispose();

                return;
            }
            //最长长度、最长长度索引初始化
            hv_Max_Length = 0;
            hv_Max_Index = 0;
            //遍历每个轮廓的长度
            HTuple end_val21 = hv_Number;
            HTuple step_val21 = 1;
            for (hv_i = 1; hv_i.Continue(end_val21, step_val21); hv_i = hv_i.TupleAdd(step_val21))
            {
                //选择轮廓
                ho_ObjectSelected.Dispose();
                HOperatorSet.SelectObj(ho_Contours, out ho_ObjectSelected, hv_i);
                //求轮廓长度
                HOperatorSet.LengthXld(ho_ObjectSelected, out hv_Length);
                //保存最长轮廓的长度和索引
                if ((int)(new HTuple(hv_Max_Length.TupleLess(hv_Length))) != 0)
                {
                    hv_Max_Length = hv_Length.Clone();
                    hv_Max_Index = hv_i.Clone();
                }
            }
            //选择最长轮廓
            ho_MaxLengthContour.Dispose();
            HOperatorSet.SelectObj(ho_Contours, out ho_MaxLengthContour, hv_Max_Index);
            //返回
            ho_ObjectSelected.Dispose();

            return;
        }

    }
}